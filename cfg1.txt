S → int main ( ) { <stmt_list> }

<stmt_list>             → <stmt> <stmt_list> | ε

<stmt>                  → ; | <decl_stmt>   | <assign_stmt>   | if ( <expr> ) { <stmt_list> } <else_opt>   | while ( <expr> ) { <stmt_list> }   | for ( <for_init> ; <for_check> ; <for_iter> ) { <stmt_list> }

<else_opt>              → else { <stmt_list> } | ε

<for_init>              → <decl_stmt> | <assign_stmt_for> | ε  
<for_check>             → <expr> | ε  
<for_iter>              → <assign_stmt_for> | ε  
<assign_stmt_for>       → id = <simple_expr> 

<decl_stmt>             → <type> id <decl_assign_opt> ;  
<decl_assign_opt>       → = <expr> | ε

<assign_stmt>           → id = <expr> ;

<expr>                  → <logical_or_expr>

<logical_or_expr>       → <logical_and_expr> <logical_or_expr_tail>  
<logical_or_expr_tail>  → orOpt <logical_and_expr> <logical_or_expr_tail> | ε

<logical_and_expr>      → <relational_expr> <logical_and_expr_tail>  
<logical_and_expr_tail> → & <relational_expr> <logical_and_expr_tail> | ε

<relational_expr>       → <simple_expr> <relop_opt>  
<relop_opt>             → <relop> <simple_expr> | ε  
<relop>                 → < | > | == | !=

<simple_expr>           → <term> <simple_expr_tail>  
<simple_expr_tail>      → + <term> <simple_expr_tail> | - <term> <simple_expr_tail> | ε

<term>                  → <factor> <term_tail>  
<term_tail>             → * <factor> <term_tail> | / <factor> <term_tail> | % <factor> <term_tail> | ε

<factor>                → ( <expr> ) | id | num

<type>                  → int | float | double | char
