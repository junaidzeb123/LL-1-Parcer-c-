S -> <program>
<program>       -> <stmt_list>

<stmt_list>     -> <stmt> <stmt_list> | ""

<stmt>          -> <assign_stmt> | <if_stmt> | <while_stmt> | <block>

<assign_stmt>   -> id = <expr> ;

<if_stmt>       -> if ( <expr> ) <stmt> else <stmt>

<while_stmt>    -> while ( <expr> ) <stmt>

<block>         -> { <stmt_list> }

<expr>          -> <expr> + <term> | <expr> - <term> | <term>

<term>          -> <term> * <factor> | <term> / <factor> | <factor>

<factor>        -> ( <expr> ) | id | num
























S -> <program>
<program>        → <decl_or_stmt_list>

<decl_or_stmt_list> → <decl_or_stmt> <decl_or_stmt_list> | ε

<decl_or_stmt>   → <decl_stmt> | <func_def> | <stmt>

<decl_stmt>      → <type> <init_decl_list> ;

<init_decl_list> → <init_decl> | <init_decl> , <init_decl_list>

<init_decl>      → id | id = <expr>

<type>           → int | float | double | char | bool | void


<func_def>       → <type> id ( <param_list> ) <block>

<param_list>     → <param> | <param> , <param_list> | ε

<param>          → <type> id



<stmt>           → <decl_stmt> | <assign_stmt> | <if_stmt> | <while_stmt> | <for_stmt> | <do_while_stmt> | <return_stmt> | <break_stmt> | <continue_stmt> | <block>
                 
<assign_stmt>    → id = <expr> ;

<if_stmt>        → if ( <expr> ) <stmt> else <stmt>

<while_stmt>     → while ( <expr> ) <stmt>

<for_stmt>       → for ( <for_init> ; <expr> ; <for_iter> ) <stmt>

<for_init>       → <decl_stmt> | <assign_stmt> | ε

<for_iter>       → <assign_stmt> | ε

<do_while_stmt>  → do <stmt> while ( <expr> ) ;

<return_stmt>    → return <expr> ; | return ;

<break_stmt>     → break ;

<continue_stmt>  → continue ;

<block>          → { <stmt_list> }



<stmt_list>      → <stmt> <stmt_list> | ε



<expr>           → <expr> + <term>  | <expr> - <term>  | <term>

<term>           → <term> * <factor>| <term> / <factor>| <factor>

<factor>         → ( <expr> ) | id | num | <function_call>

<function_call>  → id ( <arg_list> )

<arg_list>       → <expr> | <expr> , <arg_list> | ε
